spring.application.name=stream-producer

# 使用动态端口
# 启动两个应用，将会产生两个匿名队列
server.port=0

# 使用 @StreamListener 自动反序列化对象
# 此处标记是用 json 格式发送的数据
spring.cloud.stream.bindings.myQueue.content-type=application/json

# 消息分区
# Spring Cloud Stream 为分区提供了通用的抽象层，用来在消息中间件的上层实现分区处理
# 所以它对于消息中间件自身是否实现了消息分区并不关心
# 这使得 Spring Cloud Stream 为不具备分区功能的消息中间件也增加了分区功能扩展

# 通过该参数指定了分区键的表达式规则
# 我们可以根据实际的输出消息规则配置 SpEL 来生成合适的分区键
spring.cloud.stream.bindings.myQueue.producer.partition-key-expression.=payload
# 指定了分区的数量
spring.cloud.stream.bindings.myQueue.producer..partition-count=2

spring.rabbitmq.host=111.231.82.204
spring.rabbitmq.port=10002
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
